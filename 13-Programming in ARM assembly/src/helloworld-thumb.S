//helloworld-thumb.S

// The .text directive marks the beginning of the code area
.text

// Export the symbol _start, the program begins execution at _start
.global _start

// This directive tells the assembler that the next symbol will point to THUMB code
.thumb_func

// The _start label
_start:

// 16 bit Thumb mode
.code 16



// Moves the constant 1 in r0
// unsigned int fd
mov r0, #1

// This is a pseudo instruction to load the address
// into a register using pc relative addressing
// const char *buf
adr r1, buffer

// Moves the length of the buffer (an assemble time constant) into r2
// size_t count
mov r2, #buffer_len

// Move the syscall number of write into r7
mov r7, #4

// Supervisor call to write
svc #0



// int error_code
mov r0, #0

// Move the syscall number of exit into r7
mov r7, #1

// Supervisor call to exit
svc #0



// Null terminated string
buffer:
.asciz "Hello World!\n"

// The .dot operator denotes the address of the current line, 
// by subtracting it from the address of the buffer we can calculate its length
.equ buffer_len, . - buffer
