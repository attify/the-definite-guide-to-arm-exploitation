#!usr/bin/env python

# Right rotate the value by `shift` bits
def rotate_right(value, shift):
	return ((value >> shift) | (value << (32-shift))) & 0xFFFFFFFF


def main():	
	final_key = 'rk5N7Urrje4NrQovzI1PjQ=='

	key = final_key.decode('base64')
	keybytes = map(ord, list(key))

	for idx in xrange(0, len(keybytes), 4):

		# Fetch the bytes
		b0 = keybytes[idx+0] 
		b1 = keybytes[idx+1] 
		b2 = keybytes[idx+2] 
		b3 = keybytes[idx+3] 
		
		# Convert to a little endian value
		dword = (b3 << 24) | (b2 << 16) | (b1 << 8) | b0

		# Rotate right by 5 bits
		dword = rotate_right(dword, 5)

		# Extract bytes in big endian order
		b0 = dword & 0xFF
		b1 = (dword >> 8) & 0xFF
		b2 = (dword >> 16) & 0xFF
		b3 = (dword >> 24) & 0xFF

		# Store back
		keybytes[idx+0] = b0
		keybytes[idx+1] = b1
		keybytes[idx+2] = b2
		keybytes[idx+3] = b3

	# xor and print
	password = [chr(ch ^ (idx+1)) for idx, ch in enumerate(keybytes)]
	print ''.join(password)


if __name__ == '__main__':
	main()
